//
//  TableViewController.swift
//  28.Davit.Shavtvalishvili
//
//  Created by a on 30.08.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TableDisplayLogic: AnyObject
{
    func displayCountries(viewModel: Table.GetCountries.ViewModel)
    func displaySelectedCountry(viewModel: Table.ShowCountryDetails.ViewModel)
}

class TableViewController: UIViewController
{
    // MARK: - Clean Components
    
    var interactor: TableBusinessLogic
    var router: TableRoutingLogic & TableDataPassing
    
    // MARK: - View
    
    private lazy var tableView: UITableView = {
        let view = UITableView()
        view.delegate = self
        view.dataSource = self
        return view
    }()
    
    // MARK: - Fields
    
    private var dataSource = [AbstractModel]()
    
    // MARK: Object lifecycle
    
    init(interactor: TableBusinessLogic, router: TableRoutingLogic & TableDataPassing) {
        self.interactor = interactor
        self.router = router
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor.getCountries(request: Table.GetCountries.Request())
        setupView()
    }
    
    // MARK: Setup
    
    private func setupView() {
        tableView.register(CountryCell.self, forCellReuseIdentifier: CountryCell.identifier)
        view.addSubview(tableView)
        tableView.fillSuperview()
    }
    
    private func setTableData(data: [AbstractModel]) {
        self.dataSource = data
        tableView.reloadData()
    }
}

// MARK: - CountriesDisplayLogic

extension TableViewController: TableDisplayLogic {
    func displaySelectedCountry(viewModel: Table.ShowCountryDetails.ViewModel) {
        router.navigateToCountryDetails()
    }
    
    func displayCountries(viewModel: Table.GetCountries.ViewModel) {
        setTableData(data: viewModel.tableData)
    }
}

// MARK: - UITableViewDataSource

extension TableViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        dataSource.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let model = dataSource[indexPath.row]
        
        if let model = model as? CountryCellModel {
            let cell = tableView.dequeueReusableCell(withIdentifier: CountryCell.identifier) as! CountryCell
            cell.configure(with: model)
            return cell
        }
        
        return .init()
    }
}

// MARK: - UITableViewDelegate

extension TableViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let model = dataSource[indexPath.row] as? CountryCellModel else { return }
        interactor.didTapCountry(request: Table.ShowCountryDetails.Request(coord: model.latlng))
    }
}

