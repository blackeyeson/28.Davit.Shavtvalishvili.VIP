//
//  TableInteractor.swift
//  28.Davit.Shavtvalishvili
//
//  Created by a on 30.08.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TableBusinessLogic {
    func getCountries(request: Table.GetCountries.Request)
    func didTapCountry(request: Table.ShowCountryDetails.Request)
}

protocol TableDataStore {
    var selectedCountry: Country? { get }
}

final class TableInteractor: TableDataStore {
    private let presenter: TablePresentationLogic
    private let worker: TableWorkerLogic
    
    var countries = [Country]()
    private(set) var selectedCountry: Country?
    
    // MARK: - Object Lifecycle
    
    init(presenter: TablePresentationLogic, worker: TableWorkerLogic) {
        self.presenter = presenter
        self.worker = worker
    }
}

// MARK: - CountriesBusinessLogic

extension TableInteractor: TableBusinessLogic {

    func didTapCountry(request: Table.ShowCountryDetails.Request) {
        self.selectedCountry = countries.first { $0.latlng == request.coord}
        presenter.presentSelectedCountry(response: Table.ShowCountryDetails.Response())
    }
    
    func getCountries(request: Table.GetCountries.Request) {
        Task {
            do {
                let countries = try await worker.fetchCountries()
                DispatchQueue.main.async { [weak self] in
                    self?.countries = countries
                    self?.presenter.presentCountries(response: Table.GetCountries.Response(data: countries))
                }
            } catch {
                print(error)
                DispatchQueue.main.async { [weak self] in
                    let demo = [
                        Country(name: "errSiteOfflieExample1", capital: "Generic capital", population: 1, latlng: [41.7,44.8]),
                        Country(name: "errSiteOfflieExample2", capital: "Generic capital", population: 2, latlng: [33.7,-44.8]),
                        Country(name: "errSiteOfflieExample3", capital: "Generic capital", population: 3, latlng: [-41.7,-44.8])
                    ]
                    self?.countries = demo
                    self?.presenter.presentCountries(response: Table.GetCountries.Response(data: demo))
                }
            }
        }
    }
}
